apply plugin: 'jacoco'

def buildDir = "${project.buildDir}"

configurations.all {
    resolutionStrategy {
        eachDependency { details ->
            if ('org.jacoco' == details.requested.group) {
                details.useVersion "0.8.8"
            }
        }
    }
}

jacoco {
    toolVersion "0.8.8"
}

android {
    testOptions {
        unitTests {
            all {
                jacoco {
                    includeNoLocationClasses = true
                    jacoco.excludes = ['jdk.internal.*']
                }
            }
        }
    }
}

project.afterEvaluate {
    (android.hasProperty("applicationVariants") ? android.applicationVariants : android.libraryVariants).all { appVariant ->
        def variant = appVariant.name
        def coverageSourceDirs = ["src/main/java"]

        def fileFilter = [
                '**/R.class',
                '**/R*.class',
                '**/BuildConfig.*',
                '**/Manifest*.*',
                'android/**',
                'androidx/**',
                'com/google/**',
                'com/intellij/**',
                'junit/**',
                'org/**',
                '**/di/**'
        ]

        def javaClasses = fileTree(
                dir: "$buildDir/tmp/kotlin-classes/${variant}",
                excludes: fileFilter
        )

        def testTaskName = "test${variant.capitalize()}UnitTest"

        task "${testTaskName}Coverage"(type: JacocoReport, dependsOn: "$testTaskName") {
            group = "Reporting"
            description = "Generate Jacoco coverage reports on the ${variant} build."

            reports {
                csv.enabled = true
                csv.required = true
                xml.enabled = false
                xml.required = false
                html.enabled = true
                html.required = true
            }

            classDirectories.setFrom files(javaClasses)
            sourceDirectories.setFrom files(coverageSourceDirs)
            additionalSourceDirs.setFrom files(coverageSourceDirs)
            executionData.setFrom files("${buildDir}/jacoco/${testTaskName}.exec")
        }
    }
}
