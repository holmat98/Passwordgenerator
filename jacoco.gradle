apply plugin: 'jacoco'

def buildDir = "$project.buildDir"

jacoco {
    toolVersion "0.8.8"
}

android {
    testOptions {
        unitTests {
            all {
                jacoco {
                    includeNoLocationClasses = true
                    jacoco.excludes = ['jdk.internal.*']
                }
            }
        }
    }
}

android.buildTypes.all { appVariant ->
    def variant = appVariant.name
    def coverageSourceDirs = ["src/main/java"]

    def fileFilter = [
            // data binding
            'android/databinding/**/*.class',
            '**/android/databinding/*Binding.class',
            '**/android/databinding/*',
            '**/androidx/databinding/*',
            '**/BR.*',
            // android
            '**/R.class',
            '**/R$*.class',
            '**/BuildConfig.*',
            '**/Manifest*.*',
            '**/*Test*.*',
            'android/**/*.*',
            // kotlin
            '**/*MapperImpl*.*',
            '**/*$ViewInjector*.*',
            '**/*$ViewBinder*.*',
            '**/BuildConfig.*',
            '**/*Component*.*',
            '**/*BR*.*',
            '**/Manifest*.*',
            '**/*$Lambda$*.*',
            '**/*Companion*.*',
            '**/*di*',
            '**/*MembersInjector*.*',
            '**/*_MembersInjector.class',
            '**/*_Factory*.*',
            '**/*_Provide*Factory*.*',
            '**/*Extensions*.*',
            // sealed and data classes
            '**/*$Result.*',
            '**/*$Result$*.*',
            // adapters generated by moshi
            '**/*JsonAdapter.*',
    ]

    def javaClasses = fileTree(
            dir: "${buildDir}/tmp/kotlin-classes/${variant}/classes",
            excludes: fileFilter
    )

    def testTaskName = "test${variant.capitalize()}UnitTest"

    task "${variant.capitalize()}UnitTestCoverageVerification"(type: JacocoCoverageVerification) {

        classDirectories.setFrom files(javaClasses)
        sourceDirectories.setFrom files(coverageSourceDirs)
        executionData.setFrom files("${buildDir}/jacoco/${testTaskName}.exec")

        violationRules {
            rule {
                limit {
                    minimum = 0.6
                }
            }
        }
    }

    task "${testTaskName}Coverage"(type: JacocoReport, dependsOn: "$testTaskName") {
        group = "Reporting"
        description = "Generate Jacoco coverage reports on the ${variant} build."

        reports {
            csv.enabled false // change if needed
            xml.enabled false // change if needed
            html.enabled true
        }

        classDirectories.setFrom files(javaClasses)
        sourceDirectories.setFrom files(coverageSourceDirs)
        additionalSourceDirs.setFrom files(coverageSourceDirs)
        executionData.setFrom files("${buildDir}/jacoco/${testTaskName}.exec")

        finalizedBy {
            "${variant.capitalize()}UnitTestCoverageVerification"
        }
    }

}

android {
    buildTypes {
        debug {
            testCoverageEnabled true
        }
    }
}